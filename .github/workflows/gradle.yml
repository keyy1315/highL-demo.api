# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD gradle
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

env:
  DOCKER_REPO_NAME: highlighter-demo.api

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build

      - name: web docker build and push
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker build -t ${{secrets.DOCKER_USERNAME}}/${{env.DOCKER_REPO_NAME}} .
          docker push ${{secrets.DOCKER_USERNAME}}/${{env.DOCKER_REPO_NAME}}
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USERNAME}}
          key: ${{secrets.SERVER_SSH_KEY}}
          script: |
            sudo docker rm $(sudo docker ps -a)
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{env.DOCKER_REPO_NAME}}
            cd ~
            docker-compose up -d
            sudo docker image prune -f
