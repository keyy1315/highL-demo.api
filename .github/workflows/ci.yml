name: CI/CD with Docker and GitHub Actions

on:
  push:
    branches:
      - master

env:
  DOCKER_IMAGE_NAME: highlighter-demo.api
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    services:
      mariadb:
        image: mariadb:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: lol
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew build -x test

      - name: Run Tests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:mariadb://localhost:3306/lol
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Set timestamp tag
        id: tag
        run: echo "TAG=$(date +'%y%m%d%H%M')" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker buildx create --use || true
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest \
            -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }} \
            --push .

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-24.04

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        env:
          TAG: ${{ env.TAG }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${TAG}
            docker tag ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${TAG} ${{ env.DOCKER_IMAGE_NAME }}:local
            docker compose down
            docker compose up -d
